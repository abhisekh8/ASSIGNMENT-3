//Design a Java program to perform matrix operations such as addition, multiplication,
and transpose. Introduce scenarios where accessing elements beyond the matrix bounds
results in an ArrayIndexOutOfBoundsException. Handle these exceptions
effectively and provide meaningful error messages that clearly indicate the nature of
the exception.



import java.util.Scanner;

public class Q7{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
       
        int[][] matrixA = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        
        int[][] matrixB = {
            {9, 8, 7},
            {6, 5, 4},
            {3, 2, 1}
        };
        
        
        System.out.println("Matrix A:");
        printMatrix(matrixA);
        
        System.out.println("Matrix B:");
        printMatrix(matrixB);
        

        System.out.println("Matrix A + Matrix B:");
        int[][] sum = addMatrices(matrixA, matrixB);
        printMatrix(sum);
        
       
        System.out.println("Matrix A * Matrix B:");
        int[][] product = multiplyMatrices(matrixA, matrixB);
        printMatrix(product);
        
       
        System.out.println("Transpose of Matrix A:");
        int[][] transposeA = transposeMatrix(matrixA);
        printMatrix(transposeA);
        
       
        System.out.print("Enter row and column to access an element in Matrix A (e.g., 1 1): ");
        int row = scanner.nextInt();
        int col = scanner.nextInt();
        
        try {
            System.out.println("Element at (" + row + ", " + col + "): " + matrixA[row][col]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Error: Index (" + row + ", " + col + ") is out of bounds.");
        }
        
       
        scanner.close();
    }
    
   
    public static int[][] addMatrices(int[][] a, int[][] b) {
        int rows = a.length;
        int cols = a[0].length;
        int[][] sum = new int[rows][cols];
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                sum[i][j] = a[i][j] + b[i][j];
            }
        }
        return sum;
    }
    
    
    public static int[][] multiplyMatrices(int[][] a, int[][] b) {
        int rowsA = a.length;
        int colsA = a[0].length;
        int rowsB = b.length;
        int colsB = b[0].length;
        
       
        if (colsA != rowsB) {
            System.out.println("Error: Matrix dimensions do not allow multiplication.");
            return new int[0][0]; 
        }
        
        int[][] product = new int[rowsA][colsB];
        
        for (int i = 0; i < rowsA; i++) {
            for (int j = 0; j < colsB; j++) {
                for (int k = 0; k < colsA; k++) {
                    product[i][j] += a[i][k] * b[k][j];
                }
            }
        }
        return product;
    }
    
    
    public static int[][] transposeMatrix(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        int[][] transpose = new int[cols][rows];
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                transpose[j][i] = matrix[i][j];
            }
        }
        return transpose;
    }
    
   
    public static void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int value : row) {
                System.out.print(value + " ");
            }
            System.out.println();
        }
    }
}
